[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pricing-service"
version = "2025.10"
description = "Curve-based cashflow discounting and present value calculations"
authors = [
    {name = "Chris Lyons", email = "chris@chrislyons.dev"}
]
license = {text = "MIT"}
requires-python = ">=3.11"
dependencies = [
    "microapi",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
exclude = '^(src/(six\.py|dateutil/.*|flarelette/.*|pythonjsonlogger/.*))$'

[tool.ruff]
line-length = 100
target-version = "py311"

exclude = ["src/six.py"]

extend-exclude = [
  "src/dateutil/*",
  "src/flarelette/*",
  "src/pythonjsonlogger/*"
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
]

[tool.ruff.lint.isort]
known-first-party = ["microapi"]

[tool.mypy]
python_version = "3.11"
files = ["src"]
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
exclude = '(^|.*[\\/])src[\\/](six\.py|dateutil[\\/].*|flarelette[\\/].*|pythonjsonlogger[\\/].*)$'

[[tool.mypy.overrides]]
module = ["flarelette", "flarelette.*", "pythonjsonlogger", "pythonjsonlogger.*", "dateutil", "dateutil.*"]
follow_imports = "skip"
ignore_errors = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["test"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v --tb=short"

[tool.coverage.run]
source = ["src"]
omit = ["*/test/*", "*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
