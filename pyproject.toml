# Python project configuration for Bond Math
# Used by Python services (valuation, metrics)

[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "bond-math"
version = "0.1.0"
description = "Multi-language, serverless microservices system for fixed-income pricing and metrics"
authors = [
    {name = "Chris Lyons", email = "chris@chrislyons.dev"}
]
license = {text = "MIT"}
requires-python = ">=3.11"
dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
]

# Black - Code formatter
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
exclude = '(^|.*/)src/(six\.py|dateutil/.*|flarelette/.*|pythonjsonlogger/.*)$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff - Linter
[tool.ruff]
line-length = 88
target-version = "py311"

exclude = ["**/six.py"]

extend-exclude = [
  "**/src/dateutil/*",
  "**/src/flarelette/*",
  "**/src/pythonjsonlogger/*"
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
]
ignore = [
    "E501",   # line too long (handled by black)
    "B008",   # do not perform function calls in argument defaults
    "W191",   # indentation contains tabs
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Unused imports in __init__.py
"**/tests/**" = ["ARG"]   # Unused arguments in tests

# MyPy - Type checker
[tool.mypy]
files = ["src"]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true
exclude = '(^|.*[\\/])src[\\/](six\.py|dateutil[\\/].*|flarelette[\\/].*|pythonjsonlogger[\\/].*)$'

[[tool.mypy.overrides]]
module = ["js", "js.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["flarelette", "flarelette.*", "pythonjsonlogger", "pythonjsonlogger.*", "dateutil", "dateutil.*"]
follow_imports = "skip"
ignore_errors = true

# Pytest - Testing framework
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=services",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "-v",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
]

# Coverage.py
[tool.coverage.run]
branch = true
source = ["services"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
