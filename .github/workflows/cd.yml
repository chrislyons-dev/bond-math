name: CD - Deploy to Production

on:
  # push:
  #   branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

# Ensure only one deployment runs at a time
concurrency:
  group: deploy-${{ github.ref }}-${{ inputs.environment || 'production' }}
  cancel-in-progress: false

jobs:
  # Job 1: Rotate JWT Secret
  rotate-secret:
    name: Rotate Internal JWT Secret
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      new_secret: ${{ steps.generate.outputs.new_secret }}
      previous_secret: ${{ steps.fetch.outputs.previous_secret }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate new secret
        id: generate
        run: |
          # Generate cryptographically secure 64-character secret
          NEW_SECRET=$(openssl rand -base64 48 | tr -d '\n')

          # Validate secret was generated successfully
          if [ -z "$NEW_SECRET" ]; then
            echo "‚ùå Failed to generate new secret"
            exit 1
          fi

          # Validate secret length (minimum 32 chars for HMAC-SHA256)
          if [ ${#NEW_SECRET} -lt 32 ]; then
            echo "‚ùå Generated secret too short: ${#NEW_SECRET} chars (minimum 32)"
            exit 1
          fi

          echo "::add-mask::$NEW_SECRET"
          echo "new_secret=$NEW_SECRET" >> $GITHUB_OUTPUT
          echo "‚úÖ Generated new JWT secret (${#NEW_SECRET} chars)"

      - name: Fetch current secret from Cloudflare
        id: fetch
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          set -e  # Exit on any error

          # Validate required environment variables
          if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
            echo "‚ùå CLOUDFLARE_API_TOKEN secret not set"
            exit 1
          fi

          if [ -z "$CLOUDFLARE_ACCOUNT_ID" ]; then
            echo "‚ùå CLOUDFLARE_ACCOUNT_ID secret not set"
            exit 1
          fi

          # Try to fetch current secret (becomes previous)
          # If it doesn't exist (first deployment), use the new secret as both
          PREVIOUS_SECRET=$(npx wrangler secret get INTERNAL_JWT_SECRET_CURRENT \
            --name gateway \
            --env ${{ inputs.environment || 'production' }} 2>/dev/null || echo "${{ steps.generate.outputs.new_secret }}")

          # Validate fetched secret
          if [ -z "$PREVIOUS_SECRET" ]; then
            echo "‚ùå Failed to fetch or generate previous secret"
            exit 1
          fi

          echo "::add-mask::$PREVIOUS_SECRET"
          echo "previous_secret=$PREVIOUS_SECRET" >> $GITHUB_OUTPUT

          if [ "$PREVIOUS_SECRET" == "${{ steps.generate.outputs.new_secret }}" ]; then
            echo "‚ÑπÔ∏è  First deployment - using new secret for both CURRENT and PREVIOUS"
          else
            echo "‚úÖ Fetched current secret (will become PREVIOUS)"
          fi

  # Job 2: Set Secrets on All Workers
  set-secrets:
    name: Set Secrets on All Workers
    runs-on: ubuntu-latest
    needs: [rotate-secret]
    timeout-minutes: 10
    strategy:
      matrix:
        service:
          - gateway
          - daycount
          - bond-valuation
          - metrics
          - pricing

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set CURRENT secret on ${{ matrix.service }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          set -e  # Exit on any error
          set -o pipefail  # Catch errors in pipes

          echo "${{ needs.rotate-secret.outputs.new_secret }}" | \
            npx wrangler secret put INTERNAL_JWT_SECRET_CURRENT \
            --name ${{ matrix.service }} \
            --env ${{ inputs.environment || 'production' }}

          if [ $? -ne 0 ]; then
            echo "‚ùå Failed to set INTERNAL_JWT_SECRET_CURRENT on ${{ matrix.service }}"
            exit 1
          fi

          echo "‚úÖ Set INTERNAL_JWT_SECRET_CURRENT on ${{ matrix.service }}"

      - name: Set PREVIOUS secret on ${{ matrix.service }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          set -e  # Exit on any error
          set -o pipefail  # Catch errors in pipes

          echo "${{ needs.rotate-secret.outputs.previous_secret }}" | \
            npx wrangler secret put INTERNAL_JWT_SECRET_PREVIOUS \
            --name ${{ matrix.service }} \
            --env ${{ inputs.environment || 'production' }}

          if [ $? -ne 0 ]; then
            echo "‚ùå Failed to set INTERNAL_JWT_SECRET_PREVIOUS on ${{ matrix.service }}"
            exit 1
          fi

          echo "‚úÖ Set INTERNAL_JWT_SECRET_PREVIOUS on ${{ matrix.service }}"

  # Job 3: Deploy TypeScript Workers
  deploy-typescript:
    name: Deploy TypeScript Workers
    runs-on: ubuntu-latest
    needs: [set-secrets]
    timeout-minutes: 15
    strategy:
      matrix:
        service:
          - gateway
          - daycount

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build ${{ matrix.service }}
        working-directory: services/${{ matrix.service }}
        run: npm run build

      - name: Deploy ${{ matrix.service }} to Cloudflare
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        working-directory: services/${{ matrix.service }}
        run: |
          set -e  # Exit on any error

          npx wrangler deploy \
            --config ../../iac/workers/${{ matrix.service }}.toml \
            --env ${{ inputs.environment || 'production' }}

          if [ $? -ne 0 ]; then
            echo "‚ùå Failed to deploy ${{ matrix.service }}"
            exit 1
          fi

          echo "‚úÖ Deployed ${{ matrix.service }}"

  # Job 4: Deploy Python Workers
  deploy-python:
    name: Deploy Python Workers
    runs-on: ubuntu-latest
    needs: [set-secrets]
    timeout-minutes: 15
    strategy:
      matrix:
        service:
          - bond-valuation
          - metrics
          - pricing

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          npm ci
          pip install -e libs/microapi

      - name: Deploy ${{ matrix.service }} to Cloudflare
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        working-directory: services/${{ matrix.service }}
        run: |
          set -e  # Exit on any error

          npx wrangler deploy \
            --config ../../iac/workers/${{ matrix.service == 'bond-valuation' && 'valuation' || matrix.service }}.toml \
            --env ${{ inputs.environment || 'production' }}

          if [ $? -ne 0 ]; then
            echo "‚ùå Failed to deploy ${{ matrix.service }}"
            exit 1
          fi

          echo "‚úÖ Deployed ${{ matrix.service }}"

  # Job 5: Deployment Summary
  deploy-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [rotate-secret, set-secrets, deploy-typescript, deploy-python]
    timeout-minutes: 5

    steps:
      - name: Check deployment results
        run: |
          echo "üîê Secret Rotation: ${{ needs.rotate-secret.result }}"
          echo "üîë Set Secrets: ${{ needs.set-secrets.result }}"
          echo "üì¶ TypeScript Deploy: ${{ needs.deploy-typescript.result }}"
          echo "üêç Python Deploy: ${{ needs.deploy-python.result }}"
          echo ""

          if [[ "${{ needs.rotate-secret.result }}" == "failure" ]] || \
             [[ "${{ needs.set-secrets.result }}" == "failure" ]] || \
             [[ "${{ needs.deploy-typescript.result }}" == "failure" ]] || \
             [[ "${{ needs.deploy-python.result }}" == "failure" ]]; then
            echo "‚ùå Deployment Failed"
            exit 1
          else
            echo "‚úÖ Deployment Successful"
            echo "üîÑ JWT secrets rotated automatically"
            echo "üöÄ All 5 workers deployed to ${{ inputs.environment || 'production' }}"
          fi
